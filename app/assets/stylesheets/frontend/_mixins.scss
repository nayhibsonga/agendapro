// Font face easy loader usage:
// @include font-face($style-name, $file, $family, $category);
// Ex: @include font-face('Ashbury', 'AshburyLig-webfont', 'Ashbury', 'serif');

@mixin font-face($style-name, $file, $family, $category:"") {
  $filepath: $fonts-route + $family + "/" + $file;
  @font-face {
    font-family: "#{$style-name}";
    src: url($filepath + ".eot");
    src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg');
  }
  %#{$style-name} {
    font: {
      @if $category != "" {
        family: "#{$style-name}", #{$category};
      }
      @else {
        family: "#{$style-name}";
        weight: normal;
      }
    }
  }
};

// Allow to modify Placeholder styles

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
};


@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
};

@mixin roboto-font($size: 3.5em, $weight: 300) {
  font-size: $size;
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: $weight;
}

// Responsive Classic and custom breakpoints mixin

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    $class: $min;
    @if $class == xs {
      @media (min-width: 768px) { @content; }
    }
    @if $class == sm {
      @media (min-width: 769px) { @content; }
    }
    @else if $class == md {
      @media (min-width: 992px) { @content; }
    }
    @else if $class == lg {
      @media (min-width: 1200px) { @content; }
    }
    @else {
      @warn "Breakpoint mixin supports: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    $query: "all" !default;
    @if $min != 0 and $max != 0 {
      $query: "(min-width: #{$min}) and (max-width: #{$max})";
    }
    @else if $min != 0 and $max == 0 {
      $query: "(min-width: #{$min})";
    }
    @else if $min == 0 and $max != 0 {
      $query: "(max-width: #{$max})";
    }
    @media #{$query} {
      @content;
    }
  }
}

@mixin network($name, $content, $color) {
  &.#{$name}{
    &::before{
      content: $content;
    }
    &:hover{
      color:  $color;
    }
  }
}

@mixin logo($size: sm) {
  .logo {
    background: url('#{$logo-route}/#{$size}.png') no-repeat center;
    @if $size == sm {
      height: 52px;
      width: 174px;
    }
    @else if $size == md {
      height: 118px;
      width: 410px;
    }
    @else if $size == lg {
      height: 189px;
      width: 627px;
    }
    @content;
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
        -ms-transform: translate(-50%, 0);
            transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
        -ms-transform: translate(0, -50%);
            transform: translate(0, -50%);
  }
}
